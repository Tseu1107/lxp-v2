import React from "react";

const AnswerType = ({ icon = "text", active = false, className = "", onClick = () => { } }) => {
  return (
    <div className={`answer-type ${active && "active"} ${className}`} onClick={onClick} style={{ cursor: 'pointer' }}>
      {getSvg(icon, active)}
    </div>
  );
};

export default AnswerType;

const getSvg = (icon, active) => {
  switch (icon) {
    case "text":
      return (
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          stroke={active ? "#fff" : "#FF5B1D"}
        >
          <path
            d="M1 4C1 2.34315 2.34315 1 4 1H16C17.6569 1 19 2.34315 19 4V16C19 17.6569 17.6569 19 16 19H4C2.34315 19 1 17.6569 1 16V4Z"
            strokeWidth="2"
          />
          <path
            d="M13.3334 14.2856H4.76196M10.387 10.476H4.76196M13.3334 6.6665H4.76196"
            strokeWidth="2"
            strokeLinecap="round"
          />
        </svg>
      );
    case "image":
      return (
        <svg
          width="22"
          height="22"
          viewBox="0 0 22 22"
          fill={active ? "#fff" : "#FF5B1D"}
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M7.76127 11.8091L7.11483 11.0461L7.11482 11.0461L7.76127 11.8091ZM7.80968 11.7627L7.0972 11.061L7.09641 11.0618L7.80968 11.7627ZM5.77311 13.4937L5.12666 12.7307L5.12665 12.7307L5.77311 13.4937ZM5.6642 13.6083L6.48501 14.1795L6.48501 14.1795L5.6642 13.6083ZM16.2181 11.8795L15.5256 12.6009L16.2181 11.8795ZM14.5213 10.2505L13.8287 10.9719L13.8287 10.9719L14.5213 10.2505ZM13.8911 10.2461L13.2088 9.51502L13.2063 9.51739L13.8911 10.2461ZM10.7481 13.2L11.4304 13.9311L11.433 13.9287L10.7481 13.2ZM10.1083 13.1861L9.39232 13.8842L9.39375 13.8857L10.1083 13.1861ZM10.1 13.1776L9.38338 13.875L9.38406 13.8757L10.1 13.1776ZM10.0551 13.134L10.7098 12.3781L10.7098 12.3781L10.0551 13.134ZM8.52399 11.8078L9.1787 11.0519L9.1787 11.0519L8.52399 11.8078ZM8.47889 11.764L9.19578 11.0668L9.1951 11.0661L8.47889 11.764ZM8.47082 11.7557L9.18703 11.0578L9.18568 11.0564L8.47082 11.7557ZM7.81838 11.7539L7.10731 11.0508L7.10589 11.0522L7.81838 11.7539ZM14.9595 6.05001V5.05001C14.4072 5.05001 13.9595 5.49773 13.9595 6.05001H14.9595ZM15.2741 6.05001H16.2741C16.2741 5.49773 15.8264 5.05001 15.2741 5.05001V6.05001ZM15.2741 6.31642V7.31642C15.8264 7.31642 16.2741 6.8687 16.2741 6.31642H15.2741ZM14.9595 6.31642H13.9595C13.9595 6.8687 14.4072 7.31642 14.9595 7.31642V6.31642ZM1.19995 5.5002V16.5002H3.19995V5.5002H1.19995ZM5.49995 20.8002H16.5V18.8002H5.49995V20.8002ZM20.7999 16.5002V5.5002H18.7999V16.5002H20.7999ZM16.5 1.2002H5.49995V3.2002H16.5V1.2002ZM20.7999 5.5002C20.7999 3.12537 18.8748 1.2002 16.5 1.2002V3.2002C17.7702 3.2002 18.7999 4.22994 18.7999 5.5002H20.7999ZM16.5 20.8002C18.8748 20.8002 20.7999 18.875 20.7999 16.5002H18.7999C18.7999 17.7704 17.7702 18.8002 16.5 18.8002V20.8002ZM1.19995 16.5002C1.19995 18.875 3.12513 20.8002 5.49995 20.8002V18.8002C4.2297 18.8002 3.19995 17.7704 3.19995 16.5002H1.19995ZM3.19995 5.5002C3.19995 4.22994 4.2297 3.2002 5.49995 3.2002V1.2002C3.12513 1.2002 1.19995 3.12537 1.19995 5.5002H3.19995ZM8.40771 12.5721C8.4654 12.5232 8.51267 12.4741 8.52295 12.4636L7.09641 11.0618C7.09217 11.0662 7.09024 11.0681 7.08864 11.0697C7.08726 11.0711 7.08754 11.0708 7.08887 11.0695C7.09129 11.0672 7.1006 11.0582 7.11483 11.0461L8.40771 12.5721ZM6.41956 14.2566L8.40772 12.5721L7.11482 11.0461L5.12666 12.7307L6.41956 14.2566ZM6.48501 14.1795C6.46328 14.2108 6.44385 14.2322 6.43247 14.244C6.42141 14.2554 6.41534 14.2602 6.41957 14.2566L5.12665 12.7307C5.05756 12.7893 4.94504 12.8911 4.84339 13.0371L6.48501 14.1795ZM6.49995 14.1319C6.49995 14.149 6.4947 14.1656 6.48501 14.1795L4.84339 13.0371C4.62056 13.3573 4.49995 13.7392 4.49995 14.1319H6.49995ZM6.49995 16.0419V14.1319H4.49995V16.0419H6.49995ZM5.95828 15.5002C6.25744 15.5002 6.49995 15.7427 6.49995 16.0419H4.49995C4.49995 16.8473 5.15287 17.5002 5.95828 17.5002V15.5002ZM16.0416 15.5002H5.95828V17.5002H16.0416V15.5002ZM15.5 16.0419C15.5 15.7427 15.7425 15.5002 16.0416 15.5002V17.5002C16.847 17.5002 17.5 16.8473 17.5 16.0419H15.5ZM15.5 12.5408V16.0419H17.5V12.5408H15.5ZM15.5256 12.6009C15.5092 12.5852 15.5 12.5634 15.5 12.5408H17.5C17.5 12.0189 17.2871 11.5195 16.9106 11.1581L15.5256 12.6009ZM13.8287 10.9719L15.5256 12.6009L16.9106 11.1581L15.2138 9.52912L13.8287 10.9719ZM14.5734 10.9771C14.3632 11.1734 14.0362 11.1711 13.8287 10.9719L15.2138 9.52912C14.6552 8.99287 13.7749 8.98668 13.2088 9.51502L14.5734 10.9771ZM11.433 13.9287L14.576 10.9748L13.2063 9.51739L10.0633 12.4714L11.433 13.9287ZM9.39375 13.8857C9.94265 14.4463 10.8469 14.4757 11.4304 13.9311L10.0658 12.469C10.2828 12.2664 10.6184 12.2777 10.8228 12.4865L9.39375 13.8857ZM9.38406 13.8757L9.39232 13.8842L10.8242 12.4879L10.816 12.4795L9.38406 13.8757ZM9.40039 13.8899C9.38722 13.8784 9.37858 13.87 9.37636 13.8678C9.37513 13.8666 9.37487 13.8663 9.37615 13.8676C9.37764 13.8691 9.37944 13.871 9.38338 13.875L10.8167 12.4802C10.8071 12.4704 10.7632 12.4243 10.7098 12.3781L9.40039 13.8899ZM7.86928 12.5637L9.4004 13.8899L10.7098 12.3781L9.1787 11.0519L7.86928 12.5637ZM7.762 12.4612C7.7716 12.471 7.8157 12.5173 7.86928 12.5637L9.1787 11.0519C9.19191 11.0633 9.20057 11.0718 9.20282 11.074C9.20405 11.0753 9.20432 11.0755 9.20303 11.0742C9.20154 11.0727 9.19974 11.0709 9.19578 11.0668L7.762 12.4612ZM7.75461 12.4536L7.76268 12.4619L9.1951 11.0661L9.18703 11.0578L7.75461 12.4536ZM8.52944 12.457C8.31595 12.6729 7.96856 12.6723 7.75596 12.455L9.18568 11.0564C8.61629 10.4743 7.67912 10.4725 7.10731 11.0508L8.52944 12.457ZM8.52216 12.4644L8.53086 12.4556L7.10589 11.0522L7.0972 11.0611L8.52216 12.4644ZM14.9595 7.05001H15.2741V5.05001H14.9595V7.05001ZM14.2741 6.05001V6.31642H16.2741V6.05001H14.2741ZM15.2741 5.31642H14.9595V7.31642H15.2741V5.31642ZM15.9595 6.31642V6.05001H13.9595V6.31642H15.9595Z" />
        </svg>
      );
    case "equation":
      return (
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
          strokeWidth="2"
          stroke={active ? "#fff" : "#FF5B1D"}
        >
          <path d="M4 1H16C17.6569 1 19 2.34315 19 4V16C19 17.6569 17.6569 19 16 19H4C2.34315 19 1 17.6569 1 16V4C1 2.34315 2.34315 1 4 1Z" />
          <path
            d="M14.2509 14.2858L5.71423 5.74911M8.28553 12.9268C8.28553 13.6297 7.71569 14.1996 7.01275 14.1996C6.30981 14.1996 5.73997 13.6297 5.73997 12.9268C5.73997 12.2238 6.30981 11.654 7.01275 11.654C7.71569 11.654 8.28553 12.2238 8.28553 12.9268ZM14.2252 6.98714C14.2252 7.69007 13.6553 8.25992 12.9524 8.25992C12.2495 8.25992 11.6796 7.69007 11.6796 6.98714C11.6796 6.2842 12.2495 5.71436 12.9524 5.71436C13.6553 5.71436 14.2252 6.2842 14.2252 6.98714Z"
            strokeLinecap="round"
          />
        </svg>
      );
    case "mongolianScript":
      return (
        <div className="position-relative">
          <svg
            width="20"
            height="21"
            viewBox="0 0 20 21"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M1 4C1 2.34315 2.34315 1 4 1H16C17.6569 1 19 2.34315 19 4V16.7407C19 18.3976 17.6569 19.7407 16 19.7407H4C2.34315 19.7407 1 18.3976 1 16.7407V4Z"
              stroke={active ? "#fff" : "#FF5B1D"}
              strokeWidth="2"
            />
          </svg>
          {active ? (
            <img
              alt="script"
              style={{
                width: 9,
                height: 9,
                position: "absolute",
                top: 7,
                left: 6,
              }}
              src="/img/white.png"
            />
          ) : (
            <img
              alt="script"
              style={{
                width: 9,
                height: 9,
                position: "absolute",
                top: 7,
                left: 6,
              }}
              src="/img/orange.png"
            />
          )}
        </div>
      );

    default:
      return <></>;
  }
};
